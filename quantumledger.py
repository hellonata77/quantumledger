import argparse
from quantumledger.analyzer import QuantumLedgerAnalyzer

def main():
    parser = argparse.ArgumentParser(description="QuantumLedger ‚Äî –∫—Ä–∏–ø—Ç–æ-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–Ω–æ–º–∞–ª–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    parser.add_argument("address", help="–ö–æ—à–µ–ª—ë–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--network", choices=["btc", "eth"], default="btc", help="–°–µ—Ç—å (btc –∏–ª–∏ eth)")
    args = parser.parse_args()

    analyzer = QuantumLedgerAnalyzer(args.address, args.network)
    result = analyzer.analyze()

    if "error" in result:
        print(f"[!] {result['error']}")
    else:
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        for key, value in result.items():
            print(f"{key}: {value}")
        if result["quantum_anomaly_score"] > 0.5:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
        else:
            print("\n‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π.")

if __name__ == "__main__":
    main()
